@HASHBANG@
#
# Takes a FASTQ file as input and runs the Unipept pipeline to find
# out the species in this sample.
# Outputs an list of "frequency species-name" lines, ordered per frequency.
set -euo pipefail

# Other
FGS_TEMP_OUTPUT_FILE="fgs+_out.faa"

function usage() {
    echo "Usage: $(basename $0) [options]" >&2
    echo >&2
    echo "Options:" >&2
    echo "  -h, --help            Display this message." >&2
    echo >&2
}

function parse_arguments() {
    local OPTIONS_SHORT='h'
    local OPTIONS_LONG='help'

    local options=$(getopt -n "$0" -o "$OPTIONS_SHORT" --long "$OPTIONS_LONG"  -- "$@")
    eval set -- $options
    while true; do
        case "$1" in
            -h|--help)
                usage
                exit ;;
            --)
                shift
                break ;;
            *)
                break ;;
        esac
        shift
    done

    # Parse the *actual* arguments
    if [[ $# -ne 0 ]]; then
        echo "Please supply the input through stdin. No arguments allowed" >&2
        echo >&2
        usage
        exit 1
      fi
}

parse_arguments "$@"

cat | \

if [[ "$UMGAP_GENE_PREDICTOR" == "FGS++" ]]; then

    if @FGSPP_INSTALLED@; then
        @FGSPP@ -s stdin -o stdout -w 0 \
                -t "$UMGAP_FRAGGENESCAN_TRAIN_MODEL" \
                -p $UMGAP_FRAGGENESCAN_NUM_THREADS -m 3000
    else
        FGSPP_train_dir="$(dirname @FGSPP@)/train"
        @FGSPP@ -s stdin -o stdout -w 0 -r "$FGSPP_train_dir" \
                -t "$UMGAP_FRAGGENESCAN_TRAIN_MODEL" \
                -p $UMGAP_FRAGGENESCAN_NUM_THREADS -m 3000
    fi


elif [[ "$UMGAP_GENE_PREDICTOR" == "FGS" ]]; then

    # Since FragGeneScan has some troubles with stdin, create a temporary pipe
    # to replace it, and remove it in the cleanup phase
    tmp_input="$(mktemp --tmpdir="$UMGAP_TMP_DIR")"
    trap "rm -f '$tmp_input'" EXIT INT TERM HUP
    cat - >"$tmp_input" &

    # FragGeneScan persists on adding a ".faa"-suffix
    output_file="${FGS_TEMP_OUTPUT_FILE%.faa}"
    trap "rm -f '$output_file'" EXIT INT TERM HUP

    (
        cd $(which FragGeneScan | xargs dirname)
        ./FragGeneScan -s "$tmp_input" -o "$output_file" \
            -w 0 -t "$UMGAP_FRAGGENESCAN_TRAIN_MODEL" -p $UMGAP_FRAGGENESCAN_NUM_THREADS
    )

    cat "$FGS_TEMP_OUTPUT_FILE"


elif [[ "$UMGAP_GENE_PREDICTOR" == "6FT" ]]; then

    pom_file="$UMGAP_6FT_PATH/pom.xml"
    if [[ ! -f "$pom_file" ]]; then
        echo "Couldn't find a pom.xml file for 6-frame-translation in the specified folder" >&2
        exit 1
    fi
    @MAVEN@ exec:java -q -f "$pom_file" \
            -Dexec.mainClass="com.mycompany.sixframetransl.translate" \
            -Dexec.args="- $UMGAP_6FT_TRANSLATION_TABLE False"

else
    echo "Error: \"$UMGAP_GENE_PREDICTOR\" is not a valid choice for a gene predictor."
    exit 1
fi
