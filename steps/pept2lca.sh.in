@HASHBANG@
#
# Takes a FASTQ file as input and runs the Unipept pipeline to find
# out the species in this sample.
# Outputs a list of "frequency species-name" lines, ordered per frequency.

set -euo pipefail

dir="$(dirname "$0")"

function usage() {
    echo "Usage: $(basename $0) [options]" >&2
    echo >&2
    echo "Options:" >&2
    echo "  -h, --help          Display this message." >&2
    echo >&2
}

function parse_arguments() {
    local OPTIONS_SHORT='f:h'
    local OPTIONS_LONG='filter:,help'

    local options=$(getopt -n "$0" -o "$OPTIONS_SHORT" --long "$OPTIONS_LONG"  -- "$@")
    eval set -- $options
    while true; do
        case "$1" in
            -f|--filter)
                filter="$2"
                shift ;;
            -h|--help)
                usage
                exit ;;
            --)
                shift
                break ;;
            *)
                break ;;
        esac
        shift
    done

    filter="${filter:-}"

    if [[ "${UMGAP_KMERS_ENABLED,,}" == "true" && -z "$UMGAP_PEPT2LCA_INDEX_FILE" ]]; then
        echo 'If you want to use kmers, please supply an index' >&2
        echo >&2
        usage
        exit 2
    fi

    # Parse the arguments
    if [[ $# -ne 0 ]]; then
        echo "Please supply the input through stdin. No arguments allowed." >&2
        echo >&2
        usage
        exit 1
    fi
}

parse_arguments "$@"

# Find the LCA for each peptide
if [[ -n "$UMGAP_PEPT2LCA_INDEX_FILE" ]]; then
    @UMGAP@ pept2lca "$UMGAP_PEPT2LCA_INDEX_FILE"
else
    # Fallback to online version
    @UNIPEPT_GEM@ pept2lca | \

    # Convert csv to FASTA-like
    # -> skip header
    tail -n +2 | \
    # -> convert to FASTA-ish format: >`FASTA header`\n`taxon_id`
    @SED@ '/^>/ s/>\([^,]*\),[^,]*,\([^,]*\).*/>\1\n\2/' | \
    # mind the quotes in FASTA headers
    @SED@ '/^"/ s/">\([^"]*\)",[^,]*,\([^,]*\).*/>\1\n\2/'
fi | \

    # Optionally filter peptides with previously saved classifier / regressor
    # XXX can we leave this out? Apparently, the hybrid method should solve the problem.
    if [[ -n "$filter" ]]; then
        "$dir/filter.py" "${filter}" <(cat) >(cat)
    else
        cat
    fi | \

    # Convert protein-specific header to read header
    if [[ "$UMGAP_GENE_PREDICTOR" == "FGS++" ]]; then
        @SED@ '/^>/ { s/_[0-9]*_[0-9]*_[+-]$// }'
    elif [[ "$UMGAP_GENE_PREDICTOR" == "6FT" ]]; then
        @SED@ '/^>/ { s/|Frame:[A-Z  ]*$// }'
    else
        echo "Error: \"$UMGAP_GENE_PREDICTOR\" is not a valid choice for a gene predictor."
        echo "Can't aggregate protein records to header records"
        exit 1
    fi | \

    # Group LCAs of same read together
    @UMGAP@ uniq -k -i '\s+' --separator $'\n'
