@HASHBANG@
#
# Takes a FASTQ file as input and runs the Unipept pipeline to find
# out the species in this sample.
# Outputs an list of "frequency species-name" lines, ordered per frequency.

set -euo pipefail

dir="$(dirname "$0")"

function usage() {
    echo "Usage: $(basename $0) [options]" >&2
    echo >&2
    echo "Options:" >&2
    echo "  -h, --help            Display this message." >&2
    echo >&2
}

function parse_arguments() {
    local OPTIONS_SHORT='h'
    local OPTIONS_LONG='help'

    local options=$(getopt -n "$0" -o "$OPTIONS_SHORT" --long "$OPTIONS_LONG"  -- "$@")
    eval set -- $options
    while true; do
        case "$1" in
            -h|--help)
                usage
                exit ;;
            --)
                shift
                break ;;
            *)
                break ;;
        esac
        shift
    done

    # Parse the arguments
    if [[ $# -ne 0 ]]; then
        echo "Please supply the input through stdin. No arguments allowed." >&2
        echo >&2
        usage
        exit 1
    fi
}

parse_arguments "$@"

if [[ "${UMGAP_KMERS_ENABLED,,}" == "true" ]]; then
    # Use kmer index query executable to split into kmers and calculate LCA
    # for each kmer
    @UMGAP@ prot2kmer -k "$UMGAP_KMERS_LENGTH"
else
    # Split protein fragments into tryptic peptides
    @PROT2PEPT@ | \

    # Filter very small and very large peptides (they aren't indexed in Unipept anyway)
    @PEPTFILTER@
fi
